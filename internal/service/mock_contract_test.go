// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/advert-service/internal/model"
	advert "github.com/s21platform/advert-service/pkg/advert"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// CancelAdvert mocks base method.
func (m *MockDBRepo) CancelAdvert(ctx context.Context, in *advert.CancelAdvertIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAdvert", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAdvert indicates an expected call of CancelAdvert.
func (mr *MockDBRepoMockRecorder) CancelAdvert(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAdvert", reflect.TypeOf((*MockDBRepo)(nil).CancelAdvert), ctx, in)
}

// CreateAdvert mocks base method.
func (m *MockDBRepo) CreateAdvert(ctx context.Context, UUID string, in *advert.CreateAdvertIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvert", ctx, UUID, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdvert indicates an expected call of CreateAdvert.
func (mr *MockDBRepoMockRecorder) CreateAdvert(ctx, UUID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvert", reflect.TypeOf((*MockDBRepo)(nil).CreateAdvert), ctx, UUID, in)
}

// EditAdvert mocks base method.
func (m *MockDBRepo) EditAdvert(ctx context.Context, info *model.EditAdvert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAdvert", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAdvert indicates an expected call of EditAdvert.
func (mr *MockDBRepoMockRecorder) EditAdvert(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAdvert", reflect.TypeOf((*MockDBRepo)(nil).EditAdvert), ctx, info)
}

// GetAdvertCancelExpiry mocks base method.
func (m *MockDBRepo) GetAdvertCancelExpiry(ctx context.Context, ID int64) (*model.AdvertCancelExpiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertCancelExpiry", ctx, ID)
	ret0, _ := ret[0].(*model.AdvertCancelExpiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertCancelExpiry indicates an expected call of GetAdvertCancelExpiry.
func (mr *MockDBRepoMockRecorder) GetAdvertCancelExpiry(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertCancelExpiry", reflect.TypeOf((*MockDBRepo)(nil).GetAdvertCancelExpiry), ctx, ID)
}

// GetAdverts mocks base method.
func (m *MockDBRepo) GetAdverts(UUID string) (*model.AdvertInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdverts", UUID)
	ret0, _ := ret[0].(*model.AdvertInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdverts indicates an expected call of GetAdverts.
func (mr *MockDBRepoMockRecorder) GetAdverts(UUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdverts", reflect.TypeOf((*MockDBRepo)(nil).GetAdverts), UUID)
}

// GetOwnerUUID mocks base method.
func (m *MockDBRepo) GetOwnerUUID(ctx context.Context, ID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerUUID", ctx, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerUUID indicates an expected call of GetOwnerUUID.
func (mr *MockDBRepoMockRecorder) GetOwnerUUID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerUUID", reflect.TypeOf((*MockDBRepo)(nil).GetOwnerUUID), ctx, ID)
}

// IsAdvertActive mocks base method.
func (m *MockDBRepo) IsAdvertActive(ctx context.Context, ID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdvertActive", ctx, ID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdvertActive indicates an expected call of IsAdvertActive.
func (mr *MockDBRepoMockRecorder) IsAdvertActive(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdvertActive", reflect.TypeOf((*MockDBRepo)(nil).IsAdvertActive), ctx, ID)
}

// RestoreAdvert mocks base method.
func (m *MockDBRepo) RestoreAdvert(ctx context.Context, ID int64, newExpiredAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAdvert", ctx, ID, newExpiredAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreAdvert indicates an expected call of RestoreAdvert.
func (mr *MockDBRepoMockRecorder) RestoreAdvert(ctx, ID, newExpiredAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAdvert", reflect.TypeOf((*MockDBRepo)(nil).RestoreAdvert), ctx, ID, newExpiredAt)
}
